// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`storage ProgrammeSearch component should render as expected 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Programmesearch
    history={
      Array [
        "/ProgrammeSearch",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Navbar) />,
        <section>
          <form
            className="programmeForm"
            id="form"
            onSubmit={[Function]}
          />
          <section
            className="progSearchLayout"
          >
            <section
              className="programmeSearchText"
            >
              Title 
            </section>
            <section>
              <input
                form="form"
                name="text"
                onChange={[Function]}
                placeholder="Title"
                type="text"
              />
            </section>
            <section
              className="programmeSearchText"
            >
              Network 
            </section>
            <section>
              <Getorganisations
                name="network"
                network={[Function]}
              />
            </section>
            <section
              className="programmeSearchText"
            >
              Production 
            </section>
            <section>
              <Getorganisations
                name="production"
                production={[Function]}
              />
            </section>
            <section
              className="programmeSearchText"
            >
              Indie 
            </section>
            <section
              name="indies"
            >
              <Getorganisations
                indies={[Function]}
                name="indie"
              />
            </section>
            <section
              className="programmeSearchText"
            >
              From 
            </section>
            <section>
              <input
                className="date"
                form="form"
                id="datetime"
                name="fromdate"
                type="date"
              />
            </section>
            <section
              className="programmeSearchText"
            >
              To 
            </section>
            <section>
              <input
                className="date"
                form="form"
                id="datetime"
                name="todate"
                type="date"
              />
            </section>
          </section>
          <button
            className="submit"
            form="form"
            id="submit"
            name="submit"
          >
            Search
          </button>
          <button
            className="reset"
            form="form"
            id="reset"
            type="reset"
          >
            Reset
          </button>
          <button
            className="csv"
            id="download"
          >
            <CSVLink
              asyncOnClick={false}
              data={
                Array [
                  Object {
                    "": "",
                  },
                ]
              }
              filename="generatedBy_react-csv.csv"
              separator=","
              target="_blank"
              uFEFF={true}
            >
              CSV
            </CSVLink>
          </button>
          <withRouter(Displayprogrammes)
            className="results"
            name="results"
            programmes="[{\\"\\":\\"\\"}]"
          />
        </section>,
        <Footer />,
      ],
      "className": "main",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              className="programmeForm"
              id="form"
              onSubmit={[Function]}
            />,
            <section
              className="progSearchLayout"
            >
              <section
                className="programmeSearchText"
              >
                Title 
              </section>
              <section>
                <input
                  form="form"
                  name="text"
                  onChange={[Function]}
                  placeholder="Title"
                  type="text"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Network 
              </section>
              <section>
                <Getorganisations
                  name="network"
                  network={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Production 
              </section>
              <section>
                <Getorganisations
                  name="production"
                  production={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Indie 
              </section>
              <section
                name="indies"
              >
                <Getorganisations
                  indies={[Function]}
                  name="indie"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                From 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="fromdate"
                  type="date"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                To 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="todate"
                  type="date"
                />
              </section>
            </section>,
            <button
              className="submit"
              form="form"
              id="submit"
              name="submit"
            >
              Search
            </button>,
            <button
              className="reset"
              form="form"
              id="reset"
              type="reset"
            >
              Reset
            </button>,
            <button
              className="csv"
              id="download"
            >
              <CSVLink
                asyncOnClick={false}
                data={
                  Array [
                    Object {
                      "": "",
                    },
                  ]
                }
                filename="generatedBy_react-csv.csv"
                separator=","
                target="_blank"
                uFEFF={true}
              >
                CSV
              </CSVLink>
            </button>,
            <withRouter(Displayprogrammes)
              className="results"
              name="results"
              programmes="[{\\"\\":\\"\\"}]"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "programmeForm",
              "id": "form",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <section
                  className="programmeSearchText"
                >
                  Title 
                </section>,
                <section>
                  <input
                    form="form"
                    name="text"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  Network 
                </section>,
                <section>
                  <Getorganisations
                    name="network"
                    network={[Function]}
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  Production 
                </section>,
                <section>
                  <Getorganisations
                    name="production"
                    production={[Function]}
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  Indie 
                </section>,
                <section
                  name="indies"
                >
                  <Getorganisations
                    indies={[Function]}
                    name="indie"
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  From 
                </section>,
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  To 
                </section>,
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
                  />
                </section>,
              ],
              "className": "progSearchLayout",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Title ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Title ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    form="form"
                    name="text"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "form": "form",
                    "name": "text",
                    "onChange": [Function],
                    "placeholder": "Title",
                    "type": "text",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Network ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Network ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    name="network"
                    network={[Function]}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "network",
                    "network": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Production ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Production ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    name="production"
                    production={[Function]}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "production",
                    "production": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Indie ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Indie ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    indies={[Function]}
                    name="indie"
                  />,
                  "name": "indies",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "indies": [Function],
                    "name": "indie",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "From ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "From ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "date",
                    "form": "form",
                    "id": "datetime",
                    "name": "fromdate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "To ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "To ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "date",
                    "form": "form",
                    "id": "datetime",
                    "name": "todate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
            ],
            "type": "section",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Search",
              "className": "submit",
              "form": "form",
              "id": "submit",
              "name": "submit",
            },
            "ref": null,
            "rendered": "Search",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Reset",
              "className": "reset",
              "form": "form",
              "id": "reset",
              "type": "reset",
            },
            "ref": null,
            "rendered": "Reset",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <CSVLink
                asyncOnClick={false}
                data={
                  Array [
                    Object {
                      "": "",
                    },
                  ]
                }
                filename="generatedBy_react-csv.csv"
                separator=","
                target="_blank"
                uFEFF={true}
              >
                CSV
              </CSVLink>,
              "className": "csv",
              "id": "download",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "asyncOnClick": false,
                "children": "CSV",
                "data": Array [
                  Object {
                    "": "",
                  },
                ],
                "filename": "generatedBy_react-csv.csv",
                "separator": ",",
                "target": "_blank",
                "uFEFF": true,
              },
              "ref": null,
              "rendered": "CSV",
              "type": [Function],
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "results",
              "history": undefined,
              "name": "results",
              "programmes": "[{\\"\\":\\"\\"}]",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "section",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Navbar) />,
          <section>
            <form
              className="programmeForm"
              id="form"
              onSubmit={[Function]}
            />
            <section
              className="progSearchLayout"
            >
              <section
                className="programmeSearchText"
              >
                Title 
              </section>
              <section>
                <input
                  form="form"
                  name="text"
                  onChange={[Function]}
                  placeholder="Title"
                  type="text"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Network 
              </section>
              <section>
                <Getorganisations
                  name="network"
                  network={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Production 
              </section>
              <section>
                <Getorganisations
                  name="production"
                  production={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Indie 
              </section>
              <section
                name="indies"
              >
                <Getorganisations
                  indies={[Function]}
                  name="indie"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                From 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="fromdate"
                  type="date"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                To 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="todate"
                  type="date"
                />
              </section>
            </section>
            <button
              className="submit"
              form="form"
              id="submit"
              name="submit"
            >
              Search
            </button>
            <button
              className="reset"
              form="form"
              id="reset"
              type="reset"
            >
              Reset
            </button>
            <button
              className="csv"
              id="download"
            >
              <CSVLink
                asyncOnClick={false}
                data={
                  Array [
                    Object {
                      "": "",
                    },
                  ]
                }
                filename="generatedBy_react-csv.csv"
                separator=","
                target="_blank"
                uFEFF={true}
              >
                CSV
              </CSVLink>
            </button>
            <withRouter(Displayprogrammes)
              className="results"
              name="results"
              programmes="[{\\"\\":\\"\\"}]"
            />
          </section>,
          <Footer />,
        ],
        "className": "main",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                className="programmeForm"
                id="form"
                onSubmit={[Function]}
              />,
              <section
                className="progSearchLayout"
              >
                <section
                  className="programmeSearchText"
                >
                  Title 
                </section>
                <section>
                  <input
                    form="form"
                    name="text"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  Network 
                </section>
                <section>
                  <Getorganisations
                    name="network"
                    network={[Function]}
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  Production 
                </section>
                <section>
                  <Getorganisations
                    name="production"
                    production={[Function]}
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  Indie 
                </section>
                <section
                  name="indies"
                >
                  <Getorganisations
                    indies={[Function]}
                    name="indie"
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  From 
                </section>
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  To 
                </section>
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
                  />
                </section>
              </section>,
              <button
                className="submit"
                form="form"
                id="submit"
                name="submit"
              >
                Search
              </button>,
              <button
                className="reset"
                form="form"
                id="reset"
                type="reset"
              >
                Reset
              </button>,
              <button
                className="csv"
                id="download"
              >
                <CSVLink
                  asyncOnClick={false}
                  data={
                    Array [
                      Object {
                        "": "",
                      },
                    ]
                  }
                  filename="generatedBy_react-csv.csv"
                  separator=","
                  target="_blank"
                  uFEFF={true}
                >
                  CSV
                </CSVLink>
              </button>,
              <withRouter(Displayprogrammes)
                className="results"
                name="results"
                programmes="[{\\"\\":\\"\\"}]"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "programmeForm",
                "id": "form",
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <section
                    className="programmeSearchText"
                  >
                    Title 
                  </section>,
                  <section>
                    <input
                      form="form"
                      name="text"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    Network 
                  </section>,
                  <section>
                    <Getorganisations
                      name="network"
                      network={[Function]}
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    Production 
                  </section>,
                  <section>
                    <Getorganisations
                      name="production"
                      production={[Function]}
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    Indie 
                  </section>,
                  <section
                    name="indies"
                  >
                    <Getorganisations
                      indies={[Function]}
                      name="indie"
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    From 
                  </section>,
                  <section>
                    <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="fromdate"
                      type="date"
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    To 
                  </section>,
                  <section>
                    <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="todate"
                      type="date"
                    />
                  </section>,
                ],
                "className": "progSearchLayout",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Title ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Title ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      form="form"
                      name="text"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "form": "form",
                      "name": "text",
                      "onChange": [Function],
                      "placeholder": "Title",
                      "type": "text",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Network ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Network ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      name="network"
                      network={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "name": "network",
                      "network": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Production ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Production ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      name="production"
                      production={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "name": "production",
                      "production": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Indie ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Indie ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      indies={[Function]}
                      name="indie"
                    />,
                    "name": "indies",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "indies": [Function],
                      "name": "indie",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "From ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "From ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="fromdate"
                      type="date"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "date",
                      "form": "form",
                      "id": "datetime",
                      "name": "fromdate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "To ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "To ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="todate"
                      type="date"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "date",
                      "form": "form",
                      "id": "datetime",
                      "name": "todate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
              ],
              "type": "section",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Search",
                "className": "submit",
                "form": "form",
                "id": "submit",
                "name": "submit",
              },
              "ref": null,
              "rendered": "Search",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Reset",
                "className": "reset",
                "form": "form",
                "id": "reset",
                "type": "reset",
              },
              "ref": null,
              "rendered": "Reset",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <CSVLink
                  asyncOnClick={false}
                  data={
                    Array [
                      Object {
                        "": "",
                      },
                    ]
                  }
                  filename="generatedBy_react-csv.csv"
                  separator=","
                  target="_blank"
                  uFEFF={true}
                >
                  CSV
                </CSVLink>,
                "className": "csv",
                "id": "download",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "asyncOnClick": false,
                  "children": "CSV",
                  "data": Array [
                    Object {
                      "": "",
                    },
                  ],
                  "filename": "generatedBy_react-csv.csv",
                  "separator": ",",
                  "target": "_blank",
                  "uFEFF": true,
                },
                "ref": null,
                "rendered": "CSV",
                "type": [Function],
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "results",
                "history": undefined,
                "name": "results",
                "programmes": "[{\\"\\":\\"\\"}]",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "section",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`storage ProgrammeSearch component should render as expected 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Programmesearch
    history={
      Array [
        "/ProgrammeSearch",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Navbar) />,
        <section>
          <form
            className="programmeForm"
            id="form"
            onSubmit={[Function]}
          />
          <section
            className="progSearchLayout"
          >
            <section
              className="programmeSearchText"
            >
              Title 
            </section>
            <section>
              <input
                form="form"
                name="text"
                onChange={[Function]}
                placeholder="Title"
                type="text"
              />
            </section>
            <section
              className="programmeSearchText"
            >
              Network 
            </section>
            <section>
              <Getorganisations
                name="network"
                network={[Function]}
              />
            </section>
            <section
              className="programmeSearchText"
            >
              Production 
            </section>
            <section>
              <Getorganisations
                name="production"
                production={[Function]}
              />
            </section>
            <section
              className="programmeSearchText"
            >
              Indie 
            </section>
            <section
              name="indies"
            >
              <Getorganisations
                indies={[Function]}
                name="indie"
              />
            </section>
            <section
              className="programmeSearchText"
            >
              From 
            </section>
            <section>
              <input
                className="date"
                form="form"
                id="datetime"
                name="fromdate"
                type="date"
              />
            </section>
            <section
              className="programmeSearchText"
            >
              To 
            </section>
            <section>
              <input
                className="date"
                form="form"
                id="datetime"
                name="todate"
                type="date"
              />
            </section>
          </section>
          <button
            className="submit"
            form="form"
            id="submit"
            name="submit"
          >
            Search
          </button>
          <button
            className="reset"
            form="form"
            id="reset"
            type="reset"
          >
            Reset
          </button>
          <button
            className="csv"
            id="download"
          >
            <CSVLink
              asyncOnClick={false}
              data={
                Array [
                  Object {
                    "": "",
                  },
                ]
              }
              filename="generatedBy_react-csv.csv"
              separator=","
              target="_blank"
              uFEFF={true}
            >
              CSV
            </CSVLink>
          </button>
          <withRouter(Displayprogrammes)
            className="results"
            name="results"
            programmes="[{\\"\\":\\"\\"}]"
          />
        </section>,
        <Footer />,
      ],
      "className": "main",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              className="programmeForm"
              id="form"
              onSubmit={[Function]}
            />,
            <section
              className="progSearchLayout"
            >
              <section
                className="programmeSearchText"
              >
                Title 
              </section>
              <section>
                <input
                  form="form"
                  name="text"
                  onChange={[Function]}
                  placeholder="Title"
                  type="text"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Network 
              </section>
              <section>
                <Getorganisations
                  name="network"
                  network={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Production 
              </section>
              <section>
                <Getorganisations
                  name="production"
                  production={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Indie 
              </section>
              <section
                name="indies"
              >
                <Getorganisations
                  indies={[Function]}
                  name="indie"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                From 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="fromdate"
                  type="date"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                To 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="todate"
                  type="date"
                />
              </section>
            </section>,
            <button
              className="submit"
              form="form"
              id="submit"
              name="submit"
            >
              Search
            </button>,
            <button
              className="reset"
              form="form"
              id="reset"
              type="reset"
            >
              Reset
            </button>,
            <button
              className="csv"
              id="download"
            >
              <CSVLink
                asyncOnClick={false}
                data={
                  Array [
                    Object {
                      "": "",
                    },
                  ]
                }
                filename="generatedBy_react-csv.csv"
                separator=","
                target="_blank"
                uFEFF={true}
              >
                CSV
              </CSVLink>
            </button>,
            <withRouter(Displayprogrammes)
              className="results"
              name="results"
              programmes="[{\\"\\":\\"\\"}]"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "programmeForm",
              "id": "form",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <section
                  className="programmeSearchText"
                >
                  Title 
                </section>,
                <section>
                  <input
                    form="form"
                    name="text"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  Network 
                </section>,
                <section>
                  <Getorganisations
                    name="network"
                    network={[Function]}
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  Production 
                </section>,
                <section>
                  <Getorganisations
                    name="production"
                    production={[Function]}
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  Indie 
                </section>,
                <section
                  name="indies"
                >
                  <Getorganisations
                    indies={[Function]}
                    name="indie"
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  From 
                </section>,
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
                  />
                </section>,
                <section
                  className="programmeSearchText"
                >
                  To 
                </section>,
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
                  />
                </section>,
              ],
              "className": "progSearchLayout",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Title ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Title ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    form="form"
                    name="text"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "form": "form",
                    "name": "text",
                    "onChange": [Function],
                    "placeholder": "Title",
                    "type": "text",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Network ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Network ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    name="network"
                    network={[Function]}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "network",
                    "network": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Production ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Production ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    name="production"
                    production={[Function]}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "production",
                    "production": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Indie ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "Indie ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    indies={[Function]}
                    name="indie"
                  />,
                  "name": "indies",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "indies": [Function],
                    "name": "indie",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "From ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "From ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "date",
                    "form": "form",
                    "id": "datetime",
                    "name": "fromdate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "To ",
                  "className": "programmeSearchText",
                },
                "ref": null,
                "rendered": "To ",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "date",
                    "form": "form",
                    "id": "datetime",
                    "name": "todate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
            ],
            "type": "section",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Search",
              "className": "submit",
              "form": "form",
              "id": "submit",
              "name": "submit",
            },
            "ref": null,
            "rendered": "Search",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Reset",
              "className": "reset",
              "form": "form",
              "id": "reset",
              "type": "reset",
            },
            "ref": null,
            "rendered": "Reset",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <CSVLink
                asyncOnClick={false}
                data={
                  Array [
                    Object {
                      "": "",
                    },
                  ]
                }
                filename="generatedBy_react-csv.csv"
                separator=","
                target="_blank"
                uFEFF={true}
              >
                CSV
              </CSVLink>,
              "className": "csv",
              "id": "download",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "asyncOnClick": false,
                "children": "CSV",
                "data": Array [
                  Object {
                    "": "",
                  },
                ],
                "filename": "generatedBy_react-csv.csv",
                "separator": ",",
                "target": "_blank",
                "uFEFF": true,
              },
              "ref": null,
              "rendered": "CSV",
              "type": [Function],
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "results",
              "history": undefined,
              "name": "results",
              "programmes": "[{\\"\\":\\"\\"}]",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "section",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Navbar) />,
          <section>
            <form
              className="programmeForm"
              id="form"
              onSubmit={[Function]}
            />
            <section
              className="progSearchLayout"
            >
              <section
                className="programmeSearchText"
              >
                Title 
              </section>
              <section>
                <input
                  form="form"
                  name="text"
                  onChange={[Function]}
                  placeholder="Title"
                  type="text"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Network 
              </section>
              <section>
                <Getorganisations
                  name="network"
                  network={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Production 
              </section>
              <section>
                <Getorganisations
                  name="production"
                  production={[Function]}
                />
              </section>
              <section
                className="programmeSearchText"
              >
                Indie 
              </section>
              <section
                name="indies"
              >
                <Getorganisations
                  indies={[Function]}
                  name="indie"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                From 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="fromdate"
                  type="date"
                />
              </section>
              <section
                className="programmeSearchText"
              >
                To 
              </section>
              <section>
                <input
                  className="date"
                  form="form"
                  id="datetime"
                  name="todate"
                  type="date"
                />
              </section>
            </section>
            <button
              className="submit"
              form="form"
              id="submit"
              name="submit"
            >
              Search
            </button>
            <button
              className="reset"
              form="form"
              id="reset"
              type="reset"
            >
              Reset
            </button>
            <button
              className="csv"
              id="download"
            >
              <CSVLink
                asyncOnClick={false}
                data={
                  Array [
                    Object {
                      "": "",
                    },
                  ]
                }
                filename="generatedBy_react-csv.csv"
                separator=","
                target="_blank"
                uFEFF={true}
              >
                CSV
              </CSVLink>
            </button>
            <withRouter(Displayprogrammes)
              className="results"
              name="results"
              programmes="[{\\"\\":\\"\\"}]"
            />
          </section>,
          <Footer />,
        ],
        "className": "main",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                className="programmeForm"
                id="form"
                onSubmit={[Function]}
              />,
              <section
                className="progSearchLayout"
              >
                <section
                  className="programmeSearchText"
                >
                  Title 
                </section>
                <section>
                  <input
                    form="form"
                    name="text"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  Network 
                </section>
                <section>
                  <Getorganisations
                    name="network"
                    network={[Function]}
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  Production 
                </section>
                <section>
                  <Getorganisations
                    name="production"
                    production={[Function]}
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  Indie 
                </section>
                <section
                  name="indies"
                >
                  <Getorganisations
                    indies={[Function]}
                    name="indie"
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  From 
                </section>
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
                  />
                </section>
                <section
                  className="programmeSearchText"
                >
                  To 
                </section>
                <section>
                  <input
                    className="date"
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
                  />
                </section>
              </section>,
              <button
                className="submit"
                form="form"
                id="submit"
                name="submit"
              >
                Search
              </button>,
              <button
                className="reset"
                form="form"
                id="reset"
                type="reset"
              >
                Reset
              </button>,
              <button
                className="csv"
                id="download"
              >
                <CSVLink
                  asyncOnClick={false}
                  data={
                    Array [
                      Object {
                        "": "",
                      },
                    ]
                  }
                  filename="generatedBy_react-csv.csv"
                  separator=","
                  target="_blank"
                  uFEFF={true}
                >
                  CSV
                </CSVLink>
              </button>,
              <withRouter(Displayprogrammes)
                className="results"
                name="results"
                programmes="[{\\"\\":\\"\\"}]"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "programmeForm",
                "id": "form",
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <section
                    className="programmeSearchText"
                  >
                    Title 
                  </section>,
                  <section>
                    <input
                      form="form"
                      name="text"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    Network 
                  </section>,
                  <section>
                    <Getorganisations
                      name="network"
                      network={[Function]}
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    Production 
                  </section>,
                  <section>
                    <Getorganisations
                      name="production"
                      production={[Function]}
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    Indie 
                  </section>,
                  <section
                    name="indies"
                  >
                    <Getorganisations
                      indies={[Function]}
                      name="indie"
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    From 
                  </section>,
                  <section>
                    <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="fromdate"
                      type="date"
                    />
                  </section>,
                  <section
                    className="programmeSearchText"
                  >
                    To 
                  </section>,
                  <section>
                    <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="todate"
                      type="date"
                    />
                  </section>,
                ],
                "className": "progSearchLayout",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Title ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Title ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      form="form"
                      name="text"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "form": "form",
                      "name": "text",
                      "onChange": [Function],
                      "placeholder": "Title",
                      "type": "text",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Network ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Network ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      name="network"
                      network={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "name": "network",
                      "network": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Production ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Production ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      name="production"
                      production={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "name": "production",
                      "production": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Indie ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "Indie ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      indies={[Function]}
                      name="indie"
                    />,
                    "name": "indies",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "indies": [Function],
                      "name": "indie",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "From ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "From ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="fromdate"
                      type="date"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "date",
                      "form": "form",
                      "id": "datetime",
                      "name": "fromdate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "To ",
                    "className": "programmeSearchText",
                  },
                  "ref": null,
                  "rendered": "To ",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="date"
                      form="form"
                      id="datetime"
                      name="todate"
                      type="date"
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "date",
                      "form": "form",
                      "id": "datetime",
                      "name": "todate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
              ],
              "type": "section",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Search",
                "className": "submit",
                "form": "form",
                "id": "submit",
                "name": "submit",
              },
              "ref": null,
              "rendered": "Search",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Reset",
                "className": "reset",
                "form": "form",
                "id": "reset",
                "type": "reset",
              },
              "ref": null,
              "rendered": "Reset",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <CSVLink
                  asyncOnClick={false}
                  data={
                    Array [
                      Object {
                        "": "",
                      },
                    ]
                  }
                  filename="generatedBy_react-csv.csv"
                  separator=","
                  target="_blank"
                  uFEFF={true}
                >
                  CSV
                </CSVLink>,
                "className": "csv",
                "id": "download",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "asyncOnClick": false,
                  "children": "CSV",
                  "data": Array [
                    Object {
                      "": "",
                    },
                  ],
                  "filename": "generatedBy_react-csv.csv",
                  "separator": ",",
                  "target": "_blank",
                  "uFEFF": true,
                },
                "ref": null,
                "rendered": "CSV",
                "type": [Function],
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "results",
                "history": undefined,
                "name": "results",
                "programmes": "[{\\"\\":\\"\\"}]",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "section",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
