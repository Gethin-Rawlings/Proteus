// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`storage Proposalsearch component should render as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Proposalsearch
    history={
        Array [
            "/Proposalsearch",
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Navbar) />,
        <section
          className="App-intro"
>
          <form
                    className="programmeForm"
                    id="form"
                    onSubmit={[Function]}
          />
          <section
                    className="programmeSearch"
          >
                    <section>
                              <input
                                        className="usersearch"
                                        form="form"
                                        name="username"
                                        onChange={[Function]}
                                        placeholder="Title"
                                        type="text"
                                        value={undefined}
                              />
                    </section>
                    <section
                              className="networks"
                    >
                              <Getorganisations
                                        name="network"
                                        network={[Function]}
                              />
                    </section>
                    <section
                              className="productions"
                              name="productions"
                    >
                              <Getorganisations
                                        className="production"
                                        name="production"
                                        production={[Function]}
                              />
                    </section>
                    <section
                              className="indies"
                              name="indies"
                    >
                              <Getorganisations
                                        indies={[Function]}
                                        name="indie"
                              />
                    </section>
          </section>
          <br />
          <section
                    className="datePicker"
          >
                    <section>
                              From
                    </section>
                    <section
                              className="from"
                    >
                              <input
                                        form="form"
                                        id="datetime"
                                        name="fromdate"
                                        type="date"
                              />
                    </section>
                    <section>
                              To
                    </section>
                    <section
                              className="to"
                    >
                              <input
                                        form="form"
                                        id="datetime"
                                        name="todate"
                                        type="date"
                              />
                    </section>
          </section>
          <button
                    className="submit"
                    form="form"
                    id="submit"
                    name="submit"
          >
                    Search
          </button>
          <button
                    className="reset"
                    form="form"
                    id="reset"
                    type="reset"
          >
                    Reset
          </button>
          <withRouter(Displayproposals)
                    className="results"
                    history={undefined}
                    name="results"
                    programmes="[{\\"\\":\\"\\"}]"
          />
</section>,
        <Footer />,
      ],
      "className": "main",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              className="programmeForm"
              id="form"
              onSubmit={[Function]}
/>,
            <section
              className="programmeSearch"
>
              <section>
                            <input
                                          className="usersearch"
                                          form="form"
                                          name="username"
                                          onChange={[Function]}
                                          placeholder="Title"
                                          type="text"
                                          value={undefined}
                            />
              </section>
              <section
                            className="networks"
              >
                            <Getorganisations
                                          name="network"
                                          network={[Function]}
                            />
              </section>
              <section
                            className="productions"
                            name="productions"
              >
                            <Getorganisations
                                          className="production"
                                          name="production"
                                          production={[Function]}
                            />
              </section>
              <section
                            className="indies"
                            name="indies"
              >
                            <Getorganisations
                                          indies={[Function]}
                                          name="indie"
                            />
              </section>
</section>,
            <br />,
            <section
              className="datePicker"
>
              <section>
                            From
              </section>
              <section
                            className="from"
              >
                            <input
                                          form="form"
                                          id="datetime"
                                          name="fromdate"
                                          type="date"
                            />
              </section>
              <section>
                            To
              </section>
              <section
                            className="to"
              >
                            <input
                                          form="form"
                                          id="datetime"
                                          name="todate"
                                          type="date"
                            />
              </section>
</section>,
            <button
              className="submit"
              form="form"
              id="submit"
              name="submit"
>
              Search
</button>,
            <button
              className="reset"
              form="form"
              id="reset"
              type="reset"
>
              Reset
</button>,
            <withRouter(Displayproposals)
              className="results"
              history={undefined}
              name="results"
              programmes="[{\\"\\":\\"\\"}]"
/>,
          ],
          "className": "App-intro",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "programmeForm",
              "id": "form",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <section>
                  <input
                                    className="usersearch"
                                    form="form"
                                    name="username"
                                    onChange={[Function]}
                                    placeholder="Title"
                                    type="text"
                                    value={undefined}
                  />
</section>,
                <section
                  className="networks"
>
                  <Getorganisations
                                    name="network"
                                    network={[Function]}
                  />
</section>,
                <section
                  className="productions"
                  name="productions"
>
                  <Getorganisations
                                    className="production"
                                    name="production"
                                    production={[Function]}
                  />
</section>,
                <section
                  className="indies"
                  name="indies"
>
                  <Getorganisations
                                    indies={[Function]}
                                    name="indie"
                  />
</section>,
              ],
              "className": "programmeSearch",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="usersearch"
                    form="form"
                    name="username"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                    value={undefined}
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "usersearch",
                    "form": "form",
                    "name": "username",
                    "onChange": [Function],
                    "placeholder": "Title",
                    "type": "text",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    name="network"
                    network={[Function]}
/>,
                  "className": "networks",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "network",
                    "network": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    className="production"
                    name="production"
                    production={[Function]}
/>,
                  "className": "productions",
                  "name": "productions",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "production",
                    "name": "production",
                    "production": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    indies={[Function]}
                    name="indie"
/>,
                  "className": "indies",
                  "name": "indies",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "indies": [Function],
                    "name": "indie",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
            ],
            "type": "section",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <section>
                  From
</section>,
                <section
                  className="from"
>
                  <input
                                    form="form"
                                    id="datetime"
                                    name="fromdate"
                                    type="date"
                  />
</section>,
                <section>
                  To
</section>,
                <section
                  className="to"
>
                  <input
                                    form="form"
                                    id="datetime"
                                    name="todate"
                                    type="date"
                  />
</section>,
              ],
              "className": "datePicker",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "From",
                },
                "ref": null,
                "rendered": "From",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
/>,
                  "className": "from",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "form": "form",
                    "id": "datetime",
                    "name": "fromdate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "To",
                },
                "ref": null,
                "rendered": "To",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
/>,
                  "className": "to",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "form": "form",
                    "id": "datetime",
                    "name": "todate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
            ],
            "type": "section",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Search",
              "className": "submit",
              "form": "form",
              "id": "submit",
              "name": "submit",
            },
            "ref": null,
            "rendered": "Search",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Reset",
              "className": "reset",
              "form": "form",
              "id": "reset",
              "type": "reset",
            },
            "ref": null,
            "rendered": "Reset",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "results",
              "history": undefined,
              "name": "results",
              "programmes": "[{\\"\\":\\"\\"}]",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "section",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Navbar) />,
          <section
            className="App-intro"
>
            <form
                        className="programmeForm"
                        id="form"
                        onSubmit={[Function]}
            />
            <section
                        className="programmeSearch"
            >
                        <section>
                                    <input
                                                className="usersearch"
                                                form="form"
                                                name="username"
                                                onChange={[Function]}
                                                placeholder="Title"
                                                type="text"
                                                value={undefined}
                                    />
                        </section>
                        <section
                                    className="networks"
                        >
                                    <Getorganisations
                                                name="network"
                                                network={[Function]}
                                    />
                        </section>
                        <section
                                    className="productions"
                                    name="productions"
                        >
                                    <Getorganisations
                                                className="production"
                                                name="production"
                                                production={[Function]}
                                    />
                        </section>
                        <section
                                    className="indies"
                                    name="indies"
                        >
                                    <Getorganisations
                                                indies={[Function]}
                                                name="indie"
                                    />
                        </section>
            </section>
            <br />
            <section
                        className="datePicker"
            >
                        <section>
                                    From
                        </section>
                        <section
                                    className="from"
                        >
                                    <input
                                                form="form"
                                                id="datetime"
                                                name="fromdate"
                                                type="date"
                                    />
                        </section>
                        <section>
                                    To
                        </section>
                        <section
                                    className="to"
                        >
                                    <input
                                                form="form"
                                                id="datetime"
                                                name="todate"
                                                type="date"
                                    />
                        </section>
            </section>
            <button
                        className="submit"
                        form="form"
                        id="submit"
                        name="submit"
            >
                        Search
            </button>
            <button
                        className="reset"
                        form="form"
                        id="reset"
                        type="reset"
            >
                        Reset
            </button>
            <withRouter(Displayproposals)
                        className="results"
                        history={undefined}
                        name="results"
                        programmes="[{\\"\\":\\"\\"}]"
            />
</section>,
          <Footer />,
        ],
        "className": "main",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                className="programmeForm"
                id="form"
                onSubmit={[Function]}
/>,
              <section
                className="programmeSearch"
>
                <section>
                                <input
                                                className="usersearch"
                                                form="form"
                                                name="username"
                                                onChange={[Function]}
                                                placeholder="Title"
                                                type="text"
                                                value={undefined}
                                />
                </section>
                <section
                                className="networks"
                >
                                <Getorganisations
                                                name="network"
                                                network={[Function]}
                                />
                </section>
                <section
                                className="productions"
                                name="productions"
                >
                                <Getorganisations
                                                className="production"
                                                name="production"
                                                production={[Function]}
                                />
                </section>
                <section
                                className="indies"
                                name="indies"
                >
                                <Getorganisations
                                                indies={[Function]}
                                                name="indie"
                                />
                </section>
</section>,
              <br />,
              <section
                className="datePicker"
>
                <section>
                                From
                </section>
                <section
                                className="from"
                >
                                <input
                                                form="form"
                                                id="datetime"
                                                name="fromdate"
                                                type="date"
                                />
                </section>
                <section>
                                To
                </section>
                <section
                                className="to"
                >
                                <input
                                                form="form"
                                                id="datetime"
                                                name="todate"
                                                type="date"
                                />
                </section>
</section>,
              <button
                className="submit"
                form="form"
                id="submit"
                name="submit"
>
                Search
</button>,
              <button
                className="reset"
                form="form"
                id="reset"
                type="reset"
>
                Reset
</button>,
              <withRouter(Displayproposals)
                className="results"
                history={undefined}
                name="results"
                programmes="[{\\"\\":\\"\\"}]"
/>,
            ],
            "className": "App-intro",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "programmeForm",
                "id": "form",
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <section>
                    <input
                                        className="usersearch"
                                        form="form"
                                        name="username"
                                        onChange={[Function]}
                                        placeholder="Title"
                                        type="text"
                                        value={undefined}
                    />
</section>,
                  <section
                    className="networks"
>
                    <Getorganisations
                                        name="network"
                                        network={[Function]}
                    />
</section>,
                  <section
                    className="productions"
                    name="productions"
>
                    <Getorganisations
                                        className="production"
                                        name="production"
                                        production={[Function]}
                    />
</section>,
                  <section
                    className="indies"
                    name="indies"
>
                    <Getorganisations
                                        indies={[Function]}
                                        name="indie"
                    />
</section>,
                ],
                "className": "programmeSearch",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="usersearch"
                      form="form"
                      name="username"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                      value={undefined}
/>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "usersearch",
                      "form": "form",
                      "name": "username",
                      "onChange": [Function],
                      "placeholder": "Title",
                      "type": "text",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      name="network"
                      network={[Function]}
/>,
                    "className": "networks",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "name": "network",
                      "network": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      className="production"
                      name="production"
                      production={[Function]}
/>,
                    "className": "productions",
                    "name": "productions",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "production",
                      "name": "production",
                      "production": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      indies={[Function]}
                      name="indie"
/>,
                    "className": "indies",
                    "name": "indies",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "indies": [Function],
                      "name": "indie",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
              ],
              "type": "section",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <section>
                    From
</section>,
                  <section
                    className="from"
>
                    <input
                                        form="form"
                                        id="datetime"
                                        name="fromdate"
                                        type="date"
                    />
</section>,
                  <section>
                    To
</section>,
                  <section
                    className="to"
>
                    <input
                                        form="form"
                                        id="datetime"
                                        name="todate"
                                        type="date"
                    />
</section>,
                ],
                "className": "datePicker",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "From",
                  },
                  "ref": null,
                  "rendered": "From",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      form="form"
                      id="datetime"
                      name="fromdate"
                      type="date"
/>,
                    "className": "from",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "form": "form",
                      "id": "datetime",
                      "name": "fromdate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "To",
                  },
                  "ref": null,
                  "rendered": "To",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      form="form"
                      id="datetime"
                      name="todate"
                      type="date"
/>,
                    "className": "to",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "form": "form",
                      "id": "datetime",
                      "name": "todate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
              ],
              "type": "section",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Search",
                "className": "submit",
                "form": "form",
                "id": "submit",
                "name": "submit",
              },
              "ref": null,
              "rendered": "Search",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Reset",
                "className": "reset",
                "form": "form",
                "id": "reset",
                "type": "reset",
              },
              "ref": null,
              "rendered": "Reset",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "results",
                "history": undefined,
                "name": "results",
                "programmes": "[{\\"\\":\\"\\"}]",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "section",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`storage Proposalsearch component should render as expected 2`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Proposalsearch
    history={
        Array [
            "/Proposalsearch",
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Navbar) />,
        <section
          className="App-intro"
>
          <form
                    className="programmeForm"
                    id="form"
                    onSubmit={[Function]}
          />
          <section
                    className="programmeSearch"
          >
                    <section>
                              <input
                                        className="usersearch"
                                        form="form"
                                        name="username"
                                        onChange={[Function]}
                                        placeholder="Title"
                                        type="text"
                                        value={undefined}
                              />
                    </section>
                    <section
                              className="networks"
                    >
                              <Getorganisations
                                        name="network"
                                        network={[Function]}
                              />
                    </section>
                    <section
                              className="productions"
                              name="productions"
                    >
                              <Getorganisations
                                        className="production"
                                        name="production"
                                        production={[Function]}
                              />
                    </section>
                    <section
                              className="indies"
                              name="indies"
                    >
                              <Getorganisations
                                        indies={[Function]}
                                        name="indie"
                              />
                    </section>
          </section>
          <br />
          <section
                    className="datePicker"
          >
                    <section>
                              From
                    </section>
                    <section
                              className="from"
                    >
                              <input
                                        form="form"
                                        id="datetime"
                                        name="fromdate"
                                        type="date"
                              />
                    </section>
                    <section>
                              To
                    </section>
                    <section
                              className="to"
                    >
                              <input
                                        form="form"
                                        id="datetime"
                                        name="todate"
                                        type="date"
                              />
                    </section>
          </section>
          <button
                    className="submit"
                    form="form"
                    id="submit"
                    name="submit"
          >
                    Search
          </button>
          <button
                    className="reset"
                    form="form"
                    id="reset"
                    type="reset"
          >
                    Reset
          </button>
          <withRouter(Displayproposals)
                    className="results"
                    history={undefined}
                    name="results"
                    programmes="[{\\"\\":\\"\\"}]"
          />
</section>,
        <Footer />,
      ],
      "className": "main",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <form
              className="programmeForm"
              id="form"
              onSubmit={[Function]}
/>,
            <section
              className="programmeSearch"
>
              <section>
                            <input
                                          className="usersearch"
                                          form="form"
                                          name="username"
                                          onChange={[Function]}
                                          placeholder="Title"
                                          type="text"
                                          value={undefined}
                            />
              </section>
              <section
                            className="networks"
              >
                            <Getorganisations
                                          name="network"
                                          network={[Function]}
                            />
              </section>
              <section
                            className="productions"
                            name="productions"
              >
                            <Getorganisations
                                          className="production"
                                          name="production"
                                          production={[Function]}
                            />
              </section>
              <section
                            className="indies"
                            name="indies"
              >
                            <Getorganisations
                                          indies={[Function]}
                                          name="indie"
                            />
              </section>
</section>,
            <br />,
            <section
              className="datePicker"
>
              <section>
                            From
              </section>
              <section
                            className="from"
              >
                            <input
                                          form="form"
                                          id="datetime"
                                          name="fromdate"
                                          type="date"
                            />
              </section>
              <section>
                            To
              </section>
              <section
                            className="to"
              >
                            <input
                                          form="form"
                                          id="datetime"
                                          name="todate"
                                          type="date"
                            />
              </section>
</section>,
            <button
              className="submit"
              form="form"
              id="submit"
              name="submit"
>
              Search
</button>,
            <button
              className="reset"
              form="form"
              id="reset"
              type="reset"
>
              Reset
</button>,
            <withRouter(Displayproposals)
              className="results"
              history={undefined}
              name="results"
              programmes="[{\\"\\":\\"\\"}]"
/>,
          ],
          "className": "App-intro",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "programmeForm",
              "id": "form",
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <section>
                  <input
                                    className="usersearch"
                                    form="form"
                                    name="username"
                                    onChange={[Function]}
                                    placeholder="Title"
                                    type="text"
                                    value={undefined}
                  />
</section>,
                <section
                  className="networks"
>
                  <Getorganisations
                                    name="network"
                                    network={[Function]}
                  />
</section>,
                <section
                  className="productions"
                  name="productions"
>
                  <Getorganisations
                                    className="production"
                                    name="production"
                                    production={[Function]}
                  />
</section>,
                <section
                  className="indies"
                  name="indies"
>
                  <Getorganisations
                                    indies={[Function]}
                                    name="indie"
                  />
</section>,
              ],
              "className": "programmeSearch",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="usersearch"
                    form="form"
                    name="username"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                    value={undefined}
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "usersearch",
                    "form": "form",
                    "name": "username",
                    "onChange": [Function],
                    "placeholder": "Title",
                    "type": "text",
                    "value": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    name="network"
                    network={[Function]}
/>,
                  "className": "networks",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "network",
                    "network": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    className="production"
                    name="production"
                    production={[Function]}
/>,
                  "className": "productions",
                  "name": "productions",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "production",
                    "name": "production",
                    "production": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Getorganisations
                    indies={[Function]}
                    name="indie"
/>,
                  "className": "indies",
                  "name": "indies",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "indies": [Function],
                    "name": "indie",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "section",
              },
            ],
            "type": "section",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <section>
                  From
</section>,
                <section
                  className="from"
>
                  <input
                                    form="form"
                                    id="datetime"
                                    name="fromdate"
                                    type="date"
                  />
</section>,
                <section>
                  To
</section>,
                <section
                  className="to"
>
                  <input
                                    form="form"
                                    id="datetime"
                                    name="todate"
                                    type="date"
                  />
</section>,
              ],
              "className": "datePicker",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "From",
                },
                "ref": null,
                "rendered": "From",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    form="form"
                    id="datetime"
                    name="fromdate"
                    type="date"
/>,
                  "className": "from",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "form": "form",
                    "id": "datetime",
                    "name": "fromdate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "To",
                },
                "ref": null,
                "rendered": "To",
                "type": "section",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    form="form"
                    id="datetime"
                    name="todate"
                    type="date"
/>,
                  "className": "to",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "form": "form",
                    "id": "datetime",
                    "name": "todate",
                    "type": "date",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "section",
              },
            ],
            "type": "section",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Search",
              "className": "submit",
              "form": "form",
              "id": "submit",
              "name": "submit",
            },
            "ref": null,
            "rendered": "Search",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Reset",
              "className": "reset",
              "form": "form",
              "id": "reset",
              "type": "reset",
            },
            "ref": null,
            "rendered": "Reset",
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "results",
              "history": undefined,
              "name": "results",
              "programmes": "[{\\"\\":\\"\\"}]",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "section",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Navbar) />,
          <section
            className="App-intro"
>
            <form
                        className="programmeForm"
                        id="form"
                        onSubmit={[Function]}
            />
            <section
                        className="programmeSearch"
            >
                        <section>
                                    <input
                                                className="usersearch"
                                                form="form"
                                                name="username"
                                                onChange={[Function]}
                                                placeholder="Title"
                                                type="text"
                                                value={undefined}
                                    />
                        </section>
                        <section
                                    className="networks"
                        >
                                    <Getorganisations
                                                name="network"
                                                network={[Function]}
                                    />
                        </section>
                        <section
                                    className="productions"
                                    name="productions"
                        >
                                    <Getorganisations
                                                className="production"
                                                name="production"
                                                production={[Function]}
                                    />
                        </section>
                        <section
                                    className="indies"
                                    name="indies"
                        >
                                    <Getorganisations
                                                indies={[Function]}
                                                name="indie"
                                    />
                        </section>
            </section>
            <br />
            <section
                        className="datePicker"
            >
                        <section>
                                    From
                        </section>
                        <section
                                    className="from"
                        >
                                    <input
                                                form="form"
                                                id="datetime"
                                                name="fromdate"
                                                type="date"
                                    />
                        </section>
                        <section>
                                    To
                        </section>
                        <section
                                    className="to"
                        >
                                    <input
                                                form="form"
                                                id="datetime"
                                                name="todate"
                                                type="date"
                                    />
                        </section>
            </section>
            <button
                        className="submit"
                        form="form"
                        id="submit"
                        name="submit"
            >
                        Search
            </button>
            <button
                        className="reset"
                        form="form"
                        id="reset"
                        type="reset"
            >
                        Reset
            </button>
            <withRouter(Displayproposals)
                        className="results"
                        history={undefined}
                        name="results"
                        programmes="[{\\"\\":\\"\\"}]"
            />
</section>,
          <Footer />,
        ],
        "className": "main",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <form
                className="programmeForm"
                id="form"
                onSubmit={[Function]}
/>,
              <section
                className="programmeSearch"
>
                <section>
                                <input
                                                className="usersearch"
                                                form="form"
                                                name="username"
                                                onChange={[Function]}
                                                placeholder="Title"
                                                type="text"
                                                value={undefined}
                                />
                </section>
                <section
                                className="networks"
                >
                                <Getorganisations
                                                name="network"
                                                network={[Function]}
                                />
                </section>
                <section
                                className="productions"
                                name="productions"
                >
                                <Getorganisations
                                                className="production"
                                                name="production"
                                                production={[Function]}
                                />
                </section>
                <section
                                className="indies"
                                name="indies"
                >
                                <Getorganisations
                                                indies={[Function]}
                                                name="indie"
                                />
                </section>
</section>,
              <br />,
              <section
                className="datePicker"
>
                <section>
                                From
                </section>
                <section
                                className="from"
                >
                                <input
                                                form="form"
                                                id="datetime"
                                                name="fromdate"
                                                type="date"
                                />
                </section>
                <section>
                                To
                </section>
                <section
                                className="to"
                >
                                <input
                                                form="form"
                                                id="datetime"
                                                name="todate"
                                                type="date"
                                />
                </section>
</section>,
              <button
                className="submit"
                form="form"
                id="submit"
                name="submit"
>
                Search
</button>,
              <button
                className="reset"
                form="form"
                id="reset"
                type="reset"
>
                Reset
</button>,
              <withRouter(Displayproposals)
                className="results"
                history={undefined}
                name="results"
                programmes="[{\\"\\":\\"\\"}]"
/>,
            ],
            "className": "App-intro",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "programmeForm",
                "id": "form",
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <section>
                    <input
                                        className="usersearch"
                                        form="form"
                                        name="username"
                                        onChange={[Function]}
                                        placeholder="Title"
                                        type="text"
                                        value={undefined}
                    />
</section>,
                  <section
                    className="networks"
>
                    <Getorganisations
                                        name="network"
                                        network={[Function]}
                    />
</section>,
                  <section
                    className="productions"
                    name="productions"
>
                    <Getorganisations
                                        className="production"
                                        name="production"
                                        production={[Function]}
                    />
</section>,
                  <section
                    className="indies"
                    name="indies"
>
                    <Getorganisations
                                        indies={[Function]}
                                        name="indie"
                    />
</section>,
                ],
                "className": "programmeSearch",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="usersearch"
                      form="form"
                      name="username"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                      value={undefined}
/>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "usersearch",
                      "form": "form",
                      "name": "username",
                      "onChange": [Function],
                      "placeholder": "Title",
                      "type": "text",
                      "value": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      name="network"
                      network={[Function]}
/>,
                    "className": "networks",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "name": "network",
                      "network": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      className="production"
                      name="production"
                      production={[Function]}
/>,
                    "className": "productions",
                    "name": "productions",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "production",
                      "name": "production",
                      "production": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Getorganisations
                      indies={[Function]}
                      name="indie"
/>,
                    "className": "indies",
                    "name": "indies",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "indies": [Function],
                      "name": "indie",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "section",
                },
              ],
              "type": "section",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <section>
                    From
</section>,
                  <section
                    className="from"
>
                    <input
                                        form="form"
                                        id="datetime"
                                        name="fromdate"
                                        type="date"
                    />
</section>,
                  <section>
                    To
</section>,
                  <section
                    className="to"
>
                    <input
                                        form="form"
                                        id="datetime"
                                        name="todate"
                                        type="date"
                    />
</section>,
                ],
                "className": "datePicker",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "From",
                  },
                  "ref": null,
                  "rendered": "From",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      form="form"
                      id="datetime"
                      name="fromdate"
                      type="date"
/>,
                    "className": "from",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "form": "form",
                      "id": "datetime",
                      "name": "fromdate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "To",
                  },
                  "ref": null,
                  "rendered": "To",
                  "type": "section",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      form="form"
                      id="datetime"
                      name="todate"
                      type="date"
/>,
                    "className": "to",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "form": "form",
                      "id": "datetime",
                      "name": "todate",
                      "type": "date",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "section",
                },
              ],
              "type": "section",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Search",
                "className": "submit",
                "form": "form",
                "id": "submit",
                "name": "submit",
              },
              "ref": null,
              "rendered": "Search",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Reset",
                "className": "reset",
                "form": "form",
                "id": "reset",
                "type": "reset",
              },
              "ref": null,
              "rendered": "Reset",
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "results",
                "history": undefined,
                "name": "results",
                "programmes": "[{\\"\\":\\"\\"}]",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "section",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
